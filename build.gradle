plugins {
    id 'java'
    id 'org.jetbrains.intellij.platform' version '2.7.1'
    id 'org.jetbrains.grammarkit' version '2022.3.2.2'
}

group = 'org.ca65'
version = '1.8'

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

repositories {
    mavenCentral()
    intellijPlatform {
        defaultRepositories()
    }
}

dependencies {
    testImplementation('junit:junit:4.13.2')

    intellijPlatform {
        create('IC', '2024.3.1')

        pluginVerifier()
        zipSigner()
        instrumentationTools()
    }
}

intellijPlatform {
    pluginConfiguration {
        changeNotes = """This version adds a code formatter for 6502 assembly files.

This release also corrects an issue where square brackets, as used in some 65C816 long addressing modes, were being treated as a syntax error.

Line markers for branch instructions have been improved. 65C186 branch instructions are now recognised, and the plugin can now identify branches to unnamed labels, which are indicated with a different icon. Lastly, this version corrects a bug which prevented these line markers from appearing."""
    }

    pluginVerification {
        ides {
            recommended()
        }
    }
}

def generatedSourcesDir = layout.buildDirectory.dir('gen')

tasks.register('generateAsmParser', org.jetbrains.grammarkit.tasks.GenerateParserTask) {
    sourceFile.set(file("src/main/java/org/ca65/Asm.bnf"))
    targetRootOutputDir.set(generatedSourcesDir)
    pathToParser.set('org/ca65/AsmParser.java')
    pathToPsiRoot.set('org/ca65/psi')
    purgeOldFiles.set(true)
    classpath.setFrom(sourceSets.main.compileClasspath)
}

tasks.register('generateAsmLexer', org.jetbrains.grammarkit.tasks.GenerateLexerTask) {
    sourceFile.set(file("src/main/java/org/ca65/Asm.flex"))
    targetOutputDir.set(generatedSourcesDir.map { it.dir("org/ca65") })
    targetClass.set("AsmLexer")
    purgeOldFiles.set(true)
}

sourceSets.main {
    java {
        srcDir(tasks.named('generateAsmParser').flatMap { it.targetRootOutputDir })
        srcDir(tasks.named('generateAsmLexer').flatMap { it.targetOutputDir })
    }
}