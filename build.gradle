plugins {
    id 'java'
    id "org.jetbrains.intellij.platform" version "2.7.1"
    id "org.jetbrains.grammarkit" version "2022.3.2.2"
}

apply plugin: 'org.jetbrains.grammarkit'
import org.jetbrains.grammarkit.tasks.*

group 'org.ca65'
version '1.8'
sourceCompatibility = 17

repositories {
    mavenCentral()
    intellijPlatform {
        defaultRepositories()
    }
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java', 'build/gen']
        }
    }
}

dependencies {
    testImplementation group: 'junit', name: 'junit', version: '4.12'
    
    intellijPlatform {
        create('IC', '2024.3.1')
        
        pluginVerifier()
        zipSigner()
        instrumentationTools()
    }
}

// IntelliJ Platform Configuration
intellijPlatform {
    pluginConfiguration {
        changeNotes = """This version adds a code formatter for 6502 assembly files.

This release also corrects an issue where square brackets, as used in some 65C816 long addressing modes, were being treated as a syntax error.

Line markers for branch instructions have been improved. 65C186 branch instructions are now recognised, and the plugin can now identify branches to unnamed labels, which are indicated with a different icon. Lastly, this version corrects a bug which prevented these line markers from appearing."""
    }
    
    pluginVerification {
        ides {
            recommended()
        }
    }
}

// Grammar Kit tasks
task generateAsmParser(type: GenerateParserTask) {
    // source bnf file
    sourceFile = project.file("src/main/java/org/ca65/Asm.bnf")

    // optional, task-specific root for the generated files. Default: none
    targetRootOutputDir = project.layout.buildDirectory.dir('gen')

    // path to a parser file, relative to the targetRoot
    pathToParser = '/org/ca65/AsmParser.java'

    // path to a directory with generated psi files, relative to the targetRoot
    pathToPsiRoot = '/org/ca65/psi'

    // if set, plugin will remove a parser output file and psi output directory before generating new ones. Default: false
    purgeOldFiles = true

    classpath = sourceSets.main.compileClasspath
}

task generateAsmLexer(type: GenerateLexerTask) {
    // source flex file
    sourceFile = project.file("src/main/java/org/ca65/Asm.flex")

    // target directory for lexer
    targetOutputDir = project.layout.buildDirectory.dir("gen/org/ca65")

    // target classname, target file will be targetDir/targetClass.java
    targetClass = "AsmLexer"

    // optional, path to the task-specific skeleton file. Default: none
    // skeleton = '/some/specific/skeleton'

    // if set, plugin will remove a lexer output file before generating new one. Default: false
    purgeOldFiles = true
}

// Ensure parser and lexer are generated before compilation
compileJava.dependsOn generateAsmLexer, generateAsmParser