{
parserClass="org.ca65.AsmParser"

extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

psiClassPrefix="Asm"
psiImplClassSuffix="Impl"
psiPackage="org.ca65.psi"
psiImplPackage="org.ca65.psi.impl"

elementTypeHolderClass="org.ca65.psi.AsmTypes"
elementTypeClass="org.ca65.psi.AsmElementType"
tokenTypeClass="org.ca65.psi.AsmTokenType"
psiImplUtilClass="org.ca65.psi.impl.AsmPsiImplUtil"
implements("marker")="com.intellij.psi.PsiNamedElement"
implements("identifierdef")="com.intellij.psi.PsiNamedElement"
}

asmFile ::= item_*

private item_ ::= marker? (dotexpr|imports|define_constant_label|define_constant_numeric|macro|llabel)? COMMENT? EOL_WS

marker ::= (LABEL | SHORTLABEL) {
    mixin="org.ca65.psi.impl.AsmLabelDefinitionImpl"
    methods=[getLabelName getPresentation getName setName getNameIdentifier]
}

identifierdef ::= identifierr {
    mixin="org.ca65.psi.impl.AsmIdentifierDefinitionImpl"
    methods=[getLabelName getPresentation getName setName getNameIdentifier]
}
imports ::= IMPORT_KEYWORD identifierdef ( COMMA identifierdef )*
dotexpr ::= DOT_KEYWORD expr
macro ::= IDENTIFIER expr
llabel ::=  instruction_mnemonic expr?

define_constant_numeric ::= identifierdef ( EQUALS ) expr
define_constant_label ::= identifierdef ( COLON_EQUALS ) expr

expr ::= anything*

anything ::= (instruction_mnemonic|numeric_literal|STRING_LITERAL|DOT_KEYWORD|identifierr|LABEL|EQUALS|COLON_EQUALS|COMMA|REGISTER|CHAR_LITERAL|LPAREN|RPAREN|LSQUAREBRACKET|RSQUAREBRACKET|OR|LSHIFT|RSHIFT|AND|CONSTEXPR|SHORTLABEL_REF|local_label_rref|SHORTLABEL|HIBYTE|LOBYTE|BOOLOR|BOOLAND|NOT|DIV|MUL|ADD|SUB|XOR|SCOPE_ACCESS)

numeric_literal ::= INT_LITERAL
instruction_mnemonic ::= MNEMONIC

identifierr ::= IDENTIFIER {
    mixin="org.ca65.psi.impl.AsmIdentifierImpl"
    methods=[getName]
}

local_label_rref ::= LOCAL_LABEL_REF {
    mixin="org.ca65.psi.impl.AsmLocalLabelRefImpl"
    methods=[getName]
}

// Just to define the symbols
also ::= (LINE_WS|EOL_WS)
